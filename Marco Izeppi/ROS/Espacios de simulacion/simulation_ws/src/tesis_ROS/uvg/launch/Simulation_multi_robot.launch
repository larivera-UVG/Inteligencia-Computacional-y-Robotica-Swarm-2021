<?xml version="1.0" encoding="UTF-8"?>
<!-- High level launch file for Unit 2 Simulation  -->
<launch>

<env name="GAZEBO_MODEL_PATH" value="$(find uvg)/models/" />

<arg name="use_gui" default="true"/>

<!-- Set name of the world to be launched, configure as required -->
<!-- <arg name="world_name" default="worlds/empty.world"/> -->
<arg name="world_name" default="$(find uvg)/worlds/empty_arena.world"/>

<include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/> 
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg use_gui)"/>
    <arg name="headless" value="true"/>
    <arg name="debug" value="false"/>
</include>



<!-- config Turtlebot -->
<arg name="base" value="kobuki"/> <!-- create, roomba -->
<arg name="stacks" value="hexagons"/> <!-- circles, hexagons -->
<arg name="3d_sensor" value="kinect"/> <!-- kinect, asus_xtion_pro -->

<!-- Spawn a robot into Gazebo -->
<!-- Requires: urdf 'robot_description' in parameter server -->
<arg name="urdf_file" default="$(find xacro)/xacro '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
<param name="robot_description" command="$(arg urdf_file)" />

<node name="mejores_globales" pkg="uvg" type="sus_pub.py" output="screen" />

<group ns="robot1">
  <param name="tf_prefix" value="robot1_tf" />
  <include file="$(find uvg)/launch/one_robot.launch" >
    <arg name="x_pos" default="-2"/>
    <arg name="y_pos" default="-2"/>
    <arg name="z_pos" default="0.0"/>
    <arg name="yaw" default="0.0"/>
    <arg name="robot_name"  value="Robot1" />
  </include>
</group>

<group ns="robot2">
  <param name="tf_prefix" value="robot2_tf" />
  <include file="$(find uvg)/launch/one_robot.launch" >
    <arg name="x_pos" default="-3"/>
    <arg name="y_pos" default="-3"/>
    <arg name="z_pos" default="0.0"/>
    <arg name="yaw" default="0.0"/>
    <arg name="robot_name"  value="Robot2" />
  </include>
</group>

  <!-- Broadcast TF values for all fixed elements in the URDF description tree such as structural plates, bars -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  <!-- Broadcast TF values for all moving elements in the URDF description tree such as wheels, joints -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <!-- Determine whether to run a static transform publisher or not -->
  <arg name="static_tf" default="true" />
  <node if="$(arg static_tf)" pkg="tf2_ros" type="static_transform_publisher" name="odom_wrt_map_tf" args="0 0 0 0 0 0 map odom" />

</launch>